# Vault Watcher Docker Compose
# Полное развертывание с дополнительными сервисами

version: '3.8'

services:
  # Основной сервис Vault Watcher
  vault-watcher:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: vault-watcher
    restart: unless-stopped
    environment:
      - VAULT_PATH=/app/vault
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - PYTHONPATH=/app/src
    volumes:
      - ./vault:/app/vault
      - ./logs:/app/logs
      - ./backup:/app/backup
      - ./configs:/app/configs:ro
    ports:
      - "8080:8080"  # API порт
    networks:
      - vault-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: ["watch"]

  # API сервис (отдельный контейнер)
  vault-watcher-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: vault-watcher-api
    restart: unless-stopped
    environment:
      - VAULT_PATH=/app/vault
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - PYTHONPATH=/app/src
    volumes:
      - ./vault:/app/vault
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    ports:
      - "8081:8080"  # API порт
    networks:
      - vault-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: ["api"]

  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    container_name: vault-watcher-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vault-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes

  # PostgreSQL для хранения метаданных
  postgres:
    image: postgres:15-alpine
    container_name: vault-watcher-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vault_watcher
      POSTGRES_USER: vaultwatcher
      POSTGRES_PASSWORD: vaultwatcher_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - vault-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vaultwatcher -d vault_watcher"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx для обратного прокси
  nginx:
    image: nginx:alpine
    container_name: vault-watcher-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - vault-network
    depends_on:
      - vault-watcher-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: vault-watcher-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - vault-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: vault-watcher-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./deploy/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - vault-network
    depends_on:
      - prometheus

  # Elasticsearch для логов
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: vault-watcher-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - vault-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana для просмотра логов
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: vault-watcher-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - vault-network
    depends_on:
      - elasticsearch

  # Filebeat для сбора логов
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: vault-watcher-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./deploy/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/vault-watcher:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - vault-network
    depends_on:
      - elasticsearch

  # Backup сервис
  backup:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: vault-watcher-backup
    restart: "no"
    environment:
      - VAULT_PATH=/app/vault
      - BACKUP_PATH=/app/backup
    volumes:
      - ./vault:/app/vault:ro
      - ./backup:/app/backup
      - ./configs:/app/configs:ro
    networks:
      - vault-network
    command: ["backup"]
    profiles:
      - backup

  # Maintenance сервис
  maintenance:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: vault-watcher-maintenance
    restart: "no"
    environment:
      - VAULT_PATH=/app/vault
      - LOG_LEVEL=INFO
    volumes:
      - ./vault:/app/vault
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - vault-network
    command: ["maintenance"]
    profiles:
      - maintenance

networks:
  vault-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local