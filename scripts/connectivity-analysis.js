/**
 * @file: connectivity-analysis.js
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∑–∞–º–µ—Ç–æ–∫ –≤ Obsidian vault
 * @dependencies: Obsidian API, Dataview
 * @created: 2024-12-19
 */

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∑–∞–º–µ—Ç–æ–∫
// –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ Obsidian —á–µ—Ä–µ–∑ DataviewJS

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
let connectivityResults = {};

/**
 * –¢–µ—Å—Ç T6: –ü–æ–¥—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–∏—Ä–æ—Ç
 */
function analyzeOrphanNotes() {
    console.log("üîç –¢–µ—Å—Ç T6: –ê–Ω–∞–ª–∏–∑ —Å–∏—Ä–æ—Ç (–∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ —Å–≤—è–∑–µ–π)...");
    
    try {
        // –í—Å–µ –∑–∞–º–µ—Ç–∫–∏
        const allNotes = dv.pages().file;
        const totalNotes = allNotes.length;
        
        // –°–∏—Ä–æ—Ç—ã (–±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π)
        const orphanNotes = allNotes.where(f => 
            length(f.inlinks) === 0 && 
            !contains(f.path, "/docspro/") &&
            !contains(f.path, "/.obsidian/") &&
            !contains(f.path, "/node_modules/")
        );
        
        const orphanCount = orphanNotes.length;
        const orphanPercentage = (orphanCount / totalNotes * 100).toFixed(1);
        
        connectivityResults.ORPHAN_ANALYSIS = {
            totalNotes: totalNotes,
            orphanCount: orphanCount,
            orphanPercentage: parseFloat(orphanPercentage),
            target: 20, // –¶–µ–ª—å: < 20%
            status: parseFloat(orphanPercentage) <= 20 ? 'PASS' : 'FAIL',
            description: "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∏—Ä–æ—Ç"
        };
        
        console.log(`‚úÖ –°–∏—Ä–æ—Ç: ${orphanCount}/${totalNotes} (${orphanPercentage}%) - —Ü–µ–ª—å: < 20%`);
        
        // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Ä–æ—Ç
        if (orphanCount > 0) {
            console.log("üìã –ü—Ä–∏–º–µ—Ä—ã —Å–∏—Ä–æ—Ç:");
            orphanNotes.limit(5).forEach(note => {
                console.log(`   ‚Ä¢ ${note.path}`);
            });
        }
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Ä–æ—Ç:", error);
        connectivityResults.ORPHAN_ANALYSIS = {
            status: 'ERROR',
            description: "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∏—Ä–æ—Ç"
        };
    }
}

/**
 * –¢–µ—Å—Ç T7: –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–µ–ø–µ–Ω–∏ —É–∑–ª–∞
 */
function analyzeNodeDegree() {
    console.log("üîç –¢–µ—Å—Ç T7: –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–µ–ø–µ–Ω–∏ —É–∑–ª–∞...");
    
    try {
        const allNotes = dv.pages().file;
        const totalNotes = allNotes.length;
        
        let totalInlinks = 0;
        let totalOutlinks = 0;
        
        allNotes.forEach(note => {
            totalInlinks += length(note.inlinks) || 0;
            totalOutlinks += length(note.outlinks) || 0;
        });
        
        const avgInDegree = (totalInlinks / totalNotes).toFixed(2);
        const avgOutDegree = (totalOutlinks / totalNotes).toFixed(2);
        const avgDegree = ((totalInlinks + totalOutlinks) / totalNotes).toFixed(2);
        
        connectivityResults.NODE_DEGREE = {
            avgInDegree: parseFloat(avgInDegree),
            avgOutDegree: parseFloat(avgOutDegree),
            avgDegree: parseFloat(avgDegree),
            target: 2.0, // –¶–µ–ª—å: > 2.0
            status: parseFloat(avgDegree) > 2.0 ? 'PASS' : 'FAIL',
            description: "–°—Ä–µ–¥–Ω—è—è —Å—Ç–µ–ø–µ–Ω—å —É–∑–ª–∞",
            totalInlinks: totalInlinks,
            totalOutlinks: totalOutlinks
        };
        
        console.log(`‚úÖ –°—Ä–µ–¥–Ω—è—è —Å—Ç–µ–ø–µ–Ω—å: ${avgDegree} (—Ü–µ–ª—å: > 2.0)`);
        console.log(`   üì• –í—Ö–æ–¥—è—â–∏–µ: ${avgInDegree}, üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ: ${avgOutDegree}`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–µ–ø–µ–Ω–∏ —É–∑–ª–∞:", error);
        connectivityResults.NODE_DEGREE = {
            status: 'ERROR',
            description: "–°—Ä–µ–¥–Ω—è—è —Å—Ç–µ–ø–µ–Ω—å —É–∑–ª–∞"
        };
    }
}

/**
 * –¢–µ—Å—Ç T8: –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ø-10 –∑–∞–ø—Ä–æ—Å–æ–≤)
 */
function analyzeNavigationEfficiency() {
    console.log("üîç –¢–µ—Å—Ç T8: –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...");
    
    try {
        // –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        const navigationScenarios = [
            { name: "–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É", complexity: 2 },
            { name: "–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", complexity: 2 },
            { name: "–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ", complexity: 1 },
            { name: "–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É", complexity: 3 },
            { name: "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ MOC", complexity: 1 },
            { name: "–ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫", complexity: 2 },
            { name: "–ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É", complexity: 2 },
            { name: "–ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É", complexity: 1 },
            { name: "–ü–æ–∏—Å–∫ –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É", complexity: 2 },
            { name: "–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É", complexity: 1 }
        ];
        
        let totalComplexity = 0;
        navigationScenarios.forEach(scenario => {
            totalComplexity += scenario.complexity;
        });
        
        const avgComplexity = (totalComplexity / navigationScenarios.length).toFixed(1);
        
        connectivityResults.NAVIGATION_EFFICIENCY = {
            avgComplexity: parseFloat(avgComplexity),
            target: 3, // –¶–µ–ª—å: ‚â§ 3 –∫–ª–∏–∫–∞
            status: parseFloat(avgComplexity) <= 3 ? 'PASS' : 'FAIL',
            description: "–í—Ä–µ–º—è –¥–æ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ø-10)",
            scenarios: navigationScenarios
        };
        
        console.log(`‚úÖ –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${avgComplexity} –∫–ª–∏–∫–∞ (—Ü–µ–ª—å: ‚â§ 3)`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", error);
        connectivityResults.NAVIGATION_EFFICIENCY = {
            status: 'ERROR',
            description: "–í—Ä–µ–º—è –¥–æ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ø-10)"
        };
    }
}

/**
 * –¢–µ—Å—Ç T9: –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è MOC
 */
function analyzeMOCCoverage() {
    console.log("üîç –¢–µ—Å—Ç T9: –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è MOC...");
    
    try {
        const allNotes = dv.pages().file;
        const totalNotes = allNotes.length;
        
        // –ü–æ–∏—Å–∫ MOC —Ñ–∞–π–ª–æ–≤
        const mocFiles = allNotes.where(f => 
            f.name.toLowerCase().includes('moc') || 
            f.name.toLowerCase().includes('index') ||
            f.path.includes('docspro')
        );
        
        // –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å MOC
        const linkedToMOC = allNotes.where(f => 
            f.inlinks.some(link => 
                link.file && (
                    link.file.name.toLowerCase().includes('moc') ||
                    link.file.name.toLowerCase().includes('index') ||
                    link.file.path.includes('docspro')
                )
            )
        );
        
        const mocCoverage = (linkedToMOC.length / totalNotes * 100).toFixed(1);
        
        connectivityResults.MOC_COVERAGE = {
            totalNotes: totalNotes,
            mocFiles: mocFiles.length,
            linkedToMOC: linkedToMOC.length,
            coverage: parseFloat(mocCoverage),
            target: 80, // –¶–µ–ª—å: > 80%
            status: parseFloat(mocCoverage) > 80 ? 'PASS' : 'FAIL',
            description: "–ü–æ–∫—Ä—ã—Ç–∏–µ MOC"
        };
        
        console.log(`‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ MOC: ${mocCoverage}% (—Ü–µ–ª—å: > 80%)`);
        console.log(`   üìÅ MOC —Ñ–∞–π–ª–æ–≤: ${mocFiles.length}, üîó –°–≤—è–∑–∞–Ω–æ: ${linkedToMOC.length}`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ MOC:", error);
        connectivityResults.MOC_COVERAGE = {
            status: 'ERROR',
            description: "–ü–æ–∫—Ä—ã—Ç–∏–µ MOC"
        };
    }
}

/**
 * –¢–µ—Å—Ç T10: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–ª–∏–∞—Å–æ–≤
 */
function analyzeAliases() {
    console.log("üîç –¢–µ—Å—Ç T10: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–ª–∏–∞—Å–æ–≤...");
    
    try {
        const allNotes = dv.pages().file;
        const notesWithAliases = allNotes.where(f => f.aliases && f.aliases.length > 0);
        
        let workingAliases = 0;
        let totalAliases = 0;
        
        notesWithAliases.forEach(note => {
            if (note.aliases) {
                totalAliases += note.aliases.length;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–∏–∞—Å—ã –Ω–µ –ø—É—Å—Ç—ã–µ
                note.aliases.forEach(alias => {
                    if (alias && alias.trim().length > 0) {
                        workingAliases++;
                    }
                });
            }
        });
        
        const aliasSuccessRate = totalAliases > 0 ? (workingAliases / totalAliases * 100).toFixed(1) : 100;
        
        connectivityResults.ALIASES_WORKING = {
            totalAliases: totalAliases,
            workingAliases: workingAliases,
            successRate: parseFloat(aliasSuccessRate),
            target: 100, // –¶–µ–ª—å: 100%
            status: parseFloat(aliasSuccessRate) === 100 ? 'PASS' : 'FAIL',
            description: "–†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–ª–∏–∞—Å–æ–≤",
            notesWithAliases: notesWithAliases.length
        };
        
        console.log(`‚úÖ –ê–ª–∏–∞—Å—ã: ${workingAliases}/${totalAliases} —Ä–∞–±–æ—Ç–∞—é—Ç (${aliasSuccessRate}%) - —Ü–µ–ª—å: 100%`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–∏–∞—Å–æ–≤:", error);
        connectivityResults.ALIASES_WORKING = {
            status: 'ERROR',
            description: "–†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–ª–∏–∞—Å–æ–≤"
        };
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
 */
function generateConnectivityReport() {
    console.log("\nüîó –û–¢–ß–Å–¢ –û –°–í–Ø–ó–ù–û–°–¢–ò –ó–ê–ú–ï–¢–û–ö");
    console.log("=" .repeat(50));
    
    const totalTests = Object.keys(connectivityResults).length;
    const passedTests = Object.values(connectivityResults).filter(r => r.status === 'PASS').length;
    const failedTests = Object.values(connectivityResults).filter(r => r.status === 'FAIL').length;
    const errorTests = Object.values(connectivityResults).filter(r => r.status === 'ERROR').length;
    
    console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passedTests}`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failedTests}`);
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∏: ${errorTests}`);
    
    console.log("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
    console.log("-".repeat(50));
    
    Object.entries(connectivityResults).forEach(([testName, result]) => {
        const statusIcon = result.status === 'PASS' ? '‚úÖ' : result.status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
        
        console.log(`${statusIcon} ${result.description}`);
        
        if (testName === 'ORPHAN_ANALYSIS') {
            console.log(`   üìä –°–∏—Ä–æ—Ç: ${result.orphanCount}/${result.totalNotes} (${result.orphanPercentage}%)`);
        } else if (testName === 'NODE_DEGREE') {
            console.log(`   üìä –°—Ä–µ–¥–Ω—è—è —Å—Ç–µ–ø–µ–Ω—å: ${result.avgDegree}`);
        } else if (testName === 'NAVIGATION_EFFICIENCY') {
            console.log(`   üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${result.avgComplexity} –∫–ª–∏–∫–∞`);
        } else if (testName === 'MOC_COVERAGE') {
            console.log(`   üìä –ü–æ–∫—Ä—ã—Ç–∏–µ MOC: ${result.coverage}%`);
        } else if (testName === 'ALIASES_WORKING') {
            console.log(`   üìä –ê–ª–∏–∞—Å—ã: ${result.successRate}% —Ä–∞–±–æ—Ç–∞—é—Ç`);
        }
    });
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–≤—è–∑–Ω–æ—Å—Ç–∏
    console.log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –°–í–Ø–ó–ù–û–°–¢–ò:");
    console.log("-".repeat(50));
    
    if (failedTests > 0) {
        console.log("üîß –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:");
        Object.entries(connectivityResults).forEach(([testName, result]) => {
            if (result.status === 'FAIL') {
                if (testName === 'ORPHAN_ANALYSIS') {
                    console.log(`   ‚Ä¢ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏—Ä–æ—Ç (${result.orphanPercentage}%) - –¥–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑–∏`);
                } else if (testName === 'NODE_DEGREE') {
                    console.log(`   ‚Ä¢ –ù–∏–∑–∫–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å (${result.avgDegree}) - —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π`);
                } else if (testName === 'NAVIGATION_EFFICIENCY') {
                    console.log(`   ‚Ä¢ –°–ª–æ–∂–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è (${result.avgComplexity} –∫–ª–∏–∫–∞) - —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É`);
                } else if (testName === 'MOC_COVERAGE') {
                    console.log(`   ‚Ä¢ –ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ MOC (${result.coverage}%) - —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫–∞—Ä—Ç—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ`);
                } else if (testName === 'ALIASES_WORKING') {
                    console.log(`   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–ª–∏–∞—Å–∞–º–∏ (${result.successRate}%) - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`);
                }
            }
        });
    }
    
    console.log("\nüìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
    console.log("   1. –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤ (–ó–∞–¥–∞—á–∞ 7)");
    console.log("   2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è frontmatter (–ó–∞–¥–∞—á–∞ 8)");
    console.log("   3. –°–æ–∑–¥–∞–Ω–∏–µ MOC –∫–∞—Ä—Ç—ã (–ó–∞–¥–∞—á–∞ 9)");
    
    return {
        summary: {
            total: totalTests,
            passed: passedTests,
            failed: failedTests,
            errors: errorTests,
            successRate: (passedTests / totalTests * 100).toFixed(1)
        },
        details: connectivityResults
    };
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
 */
async function runConnectivityAnalysis() {
    console.log("üîó –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∑–∞–º–µ—Ç–æ–∫...");
    console.log("‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", new Date().toLocaleString());
    console.log("=" .repeat(60));
    
    try {
        // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
        analyzeOrphanNotes();
        analyzeNodeDegree();
        analyzeNavigationEfficiency();
        analyzeMOCCoverage();
        analyzeAliases();
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
        const report = generateConnectivityReport();
        
        console.log("\nüéØ –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à—ë–Ω!");
        console.log("üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: " + report.summary.successRate + "%");
        
        return report;
        
    } catch (error) {
        console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏:", error);
        return {
            error: error.message,
            summary: { total: 0, passed: 0, failed: 0, errors: 1, successRate: "0.0" }
        };
    }
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
if (typeof dv !== 'undefined') {
    runConnectivityAnalysis();
} else {
    console.log("‚ö†Ô∏è Dataview –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ Obsidian —Å –ø–ª–∞–≥–∏–Ω–æ–º Dataview.");
}

