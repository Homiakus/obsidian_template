/**
 * @file: performance-audit.js
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Obsidian vault
 * @dependencies: Obsidian API, Dataview
 * @created: 2024-12-19
 */

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ vault
// –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ Obsidian —á–µ—Ä–µ–∑ DataviewJS

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const PERFORMANCE_TESTS = {
    MOC_OPEN: { target: 1500, description: "–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è MOC" },
    GLOBAL_SEARCH: { target: 800, description: "–í—Ä–µ–º—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞" },
    VAULT_LOAD: { target: 3000, description: "–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ vault" },
    PLUGIN_RESPONSE: { target: 100, description: "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤" }
};

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
let testResults = {};

/**
 * –¢–µ—Å—Ç T1: –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è MOC
 */
async function testMOCPerformance() {
    console.log("üîç –¢–µ—Å—Ç T1: –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è MOC...");
    
    const startTime = performance.now();
    
    try {
        // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å MOC —Ñ–∞–π–ª
        const mocFiles = dv.pages().file.where(f => 
            f.name.toLowerCase().includes('moc') || 
            f.name.toLowerCase().includes('index') ||
            f.path.includes('docspro')
        ).limit(1);
        
        if (mocFiles.length > 0) {
            // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è MOC
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        const endTime = performance.now();
        const duration = endTime - startTime;
        
        testResults.MOC_OPEN = {
            actual: Math.round(duration),
            target: PERFORMANCE_TESTS.MOC_OPEN.target,
            status: duration <= PERFORMANCE_TESTS.MOC_OPEN.target ? 'PASS' : 'FAIL',
            description: PERFORMANCE_TESTS.MOC_OPEN.description
        };
        
        console.log(`‚úÖ MOC –æ—Ç–∫—Ä—ã—Ç –∑–∞ ${duration.toFixed(0)}–º—Å (—Ü–µ–ª—å: ${PERFORMANCE_TESTS.MOC_OPEN.target}–º—Å)`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ MOC:", error);
        testResults.MOC_OPEN = {
            actual: 'ERROR',
            target: PERFORMANCE_TESTS.MOC_OPEN.target,
            status: 'ERROR',
            description: PERFORMANCE_TESTS.MOC_OPEN.description
        };
    }
}

/**
 * –¢–µ—Å—Ç T2: –í—Ä–µ–º—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
async function testGlobalSearchPerformance() {
    console.log("üîç –¢–µ—Å—Ç T2: –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...");
    
    const startTime = performance.now();
    
    try {
        // –°–∏–º—É–ª—è—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const searchQuery = "test";
        const results = dv.pages().where(f => 
            f.file.name.toLowerCase().includes(searchQuery) ||
            f.file.content.toLowerCase().includes(searchQuery)
        ).limit(10);
        
        const endTime = performance.now();
        const duration = endTime - startTime;
        
        testResults.GLOBAL_SEARCH = {
            actual: Math.round(duration),
            target: PERFORMANCE_TESTS.GLOBAL_SEARCH.target,
            status: duration <= PERFORMANCE_TESTS.GLOBAL_SEARCH.target ? 'PASS' : 'FAIL',
            description: PERFORMANCE_TESTS.GLOBAL_SEARCH.description,
            resultsCount: results.length
        };
        
        console.log(`‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${duration.toFixed(0)}–º—Å (—Ü–µ–ª—å: ${PERFORMANCE_TESTS.GLOBAL_SEARCH.target}–º—Å), –Ω–∞–π–¥–µ–Ω–æ: ${results.length}`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–∏—Å–∫–∞:", error);
        testResults.GLOBAL_SEARCH = {
            actual: 'ERROR',
            target: PERFORMANCE_TESTS.GLOBAL_SEARCH.target,
            status: 'ERROR',
            description: PERFORMANCE_TESTS.GLOBAL_SEARCH.description
        };
    }
}

/**
 * –¢–µ—Å—Ç T3: –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ vault
 */
async function testVaultLoadPerformance() {
    console.log("üîç –¢–µ—Å—Ç T3: –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ vault...");
    
    const startTime = performance.now();
    
    try {
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ vault
        const totalFiles = dv.pages().length;
        const totalSize = dv.pages().file.reduce((acc, f) => acc + (f.size || 0), 0);
        
        const endTime = performance.now();
        const duration = endTime - startTime;
        
        testResults.VAULT_LOAD = {
            actual: Math.round(duration),
            target: PERFORMANCE_TESTS.VAULT_LOAD.target,
            status: duration <= PERFORMANCE_TESTS.VAULT_LOAD.target ? 'PASS' : 'FAIL',
            description: PERFORMANCE_TESTS.VAULT_LOAD.description,
            totalFiles: totalFiles,
            totalSize: totalSize
        };
        
        console.log(`‚úÖ Vault –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ ${duration.toFixed(0)}–º—Å (—Ü–µ–ª—å: ${PERFORMANCE_TESTS.VAULT_LOAD.target}–º—Å), —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ vault:", error);
        testResults.VAULT_LOAD = {
            actual: 'ERROR',
            target: PERFORMANCE_TESTS.VAULT_LOAD.target,
            status: 'ERROR',
            description: PERFORMANCE_TESTS.VAULT_LOAD.description
        };
    }
}

/**
 * –¢–µ—Å—Ç T4: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
 */
function testMemoryUsage() {
    console.log("üîç –¢–µ—Å—Ç T4: –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...");
    
    try {
        // –û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
        const totalFiles = dv.pages().length;
        const estimatedMemory = totalFiles * 0.5; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 0.5MB –Ω–∞ —Ñ–∞–π–ª
        
        testResults.MEMORY_USAGE = {
            actual: Math.round(estimatedMemory),
            target: 100, // –¶–µ–ª—å: < 100MB
            status: estimatedMemory <= 100 ? 'PASS' : 'FAIL',
            description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏",
            totalFiles: totalFiles
        };
        
        console.log(`‚úÖ –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏: ${estimatedMemory.toFixed(1)}MB (—Ü–µ–ª—å: < 100MB), —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–∞–º—è—Ç–∏:", error);
        testResults.MEMORY_USAGE = {
            actual: 'ERROR',
            target: 100,
            status: 'ERROR',
            description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"
        };
    }
}

/**
 * –¢–µ—Å—Ç T5: –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
 */
async function testPluginPerformance() {
    console.log("üîç –¢–µ—Å—Ç T5: –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤...");
    
    const startTime = performance.now();
    
    try {
        // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Dataview
        const testQuery = dv.pages().limit(1);
        
        const endTime = performance.now();
        const duration = endTime - startTime;
        
        testResults.PLUGIN_RESPONSE = {
            actual: Math.round(duration),
            target: PERFORMANCE_TESTS.PLUGIN_RESPONSE.target,
            status: duration <= PERFORMANCE_TESTS.PLUGIN_RESPONSE.target ? 'PASS' : 'FAIL',
            description: PERFORMANCE_TESTS.PLUGIN_RESPONSE.description
        };
        
        console.log(`‚úÖ –ü–ª–∞–≥–∏–Ω—ã –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ ${duration.toFixed(0)}–º—Å (—Ü–µ–ª—å: ${PERFORMANCE_TESTS.PLUGIN_RESPONSE.target}–º—Å)`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–ª–∞–≥–∏–Ω–æ–≤:", error);
        testResults.PLUGIN_RESPONSE = {
            actual: 'ERROR',
            target: PERFORMANCE_TESTS.PLUGIN_RESPONSE.target,
            status: 'ERROR',
            description: PERFORMANCE_TESTS.PLUGIN_RESPONSE.description
        };
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
function generatePerformanceReport() {
    console.log("\nüìä –û–¢–ß–Å–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò VAULT");
    console.log("=" .repeat(50));
    
    const totalTests = Object.keys(testResults).length;
    const passedTests = Object.values(testResults).filter(r => r.status === 'PASS').length;
    const failedTests = Object.values(testResults).filter(r => r.status === 'FAIL').length;
    const errorTests = Object.values(testResults).filter(r => r.status === 'ERROR').length;
    
    console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passedTests}`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failedTests}`);
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∏: ${errorTests}`);
    
    console.log("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
    console.log("-".repeat(50));
    
    Object.entries(testResults).forEach(([testName, result]) => {
        const statusIcon = result.status === 'PASS' ? '‚úÖ' : result.status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
        const actual = typeof result.actual === 'number' ? `${result.actual}–º—Å` : result.actual;
        const target = typeof result.target === 'number' ? `${result.target}–º—Å` : result.target;
        
        console.log(`${statusIcon} ${result.description}: ${actual} (—Ü–µ–ª—å: ${target})`);
        
        if (result.status === 'FAIL' && typeof result.actual === 'number' && typeof result.target === 'number') {
            const deviation = ((result.actual - result.target) / result.target * 100).toFixed(1);
            console.log(`   üìä –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${deviation}%`);
        }
        
        if (result.totalFiles) {
            console.log(`   üìÅ –§–∞–π–ª–æ–≤: ${result.totalFiles}`);
        }
    });
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:");
    console.log("-".repeat(50));
    
    if (failedTests > 0) {
        console.log("üîß –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:");
        Object.entries(testResults).forEach(([testName, result]) => {
            if (result.status === 'FAIL') {
                console.log(`   ‚Ä¢ ${result.description}: —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è`);
            }
        });
    }
    
    if (errorTests > 0) {
        console.log("‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:");
        Object.entries(testResults).forEach(([testName, result]) => {
            if (result.status === 'ERROR') {
                console.log(`   ‚Ä¢ ${result.description}: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`);
            }
        });
    }
    
    console.log("\nüìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
    console.log("   1. –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∑–∞–º–µ—Ç–æ–∫ (–ó–∞–¥–∞—á–∞ 6)");
    console.log("   2. –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤ (–ó–∞–¥–∞—á–∞ 7)");
    console.log("   3. –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è frontmatter (–ó–∞–¥–∞—á–∞ 8)");
    
    return {
        summary: {
            total: totalTests,
            passed: passedTests,
            failed: failedTests,
            errors: errorTests,
            successRate: (passedTests / totalTests * 100).toFixed(1)
        },
        details: testResults
    };
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞—É–¥–∏—Ç–∞
 */
async function runPerformanceAudit() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ vault...");
    console.log("‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", new Date().toLocaleString());
    console.log("=" .repeat(60));
    
    try {
        // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        await testMOCPerformance();
        await testGlobalSearchPerformance();
        await testVaultLoadPerformance();
        testMemoryUsage();
        await testPluginPerformance();
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
        const report = generatePerformanceReport();
        
        console.log("\nüéØ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!");
        console.log("üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: " + report.summary.successRate + "%");
        
        return report;
        
    } catch (error) {
        console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞:", error);
        return {
            error: error.message,
            summary: { total: 0, passed: 0, failed: 0, errors: 1, successRate: "0.0" }
        };
    }
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
if (typeof dv !== 'undefined') {
    runPerformanceAudit();
} else {
    console.log("‚ö†Ô∏è Dataview –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ Obsidian —Å –ø–ª–∞–≥–∏–Ω–æ–º Dataview.");
}

