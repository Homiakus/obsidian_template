import { App, Plugin, TFile, Notice } from "obsidian";
import { PluginSettings, DEFAULT_SETTINGS, migrateSettings } from "./settings";
import { MaskBuilderSettingTab } from "./ui/settings-tab";
import { MaskBuilderModal } from "./ui/mask-builder-modal";
import { DebugPanel } from "./ui/debug-panel";
import { AnalyticsPanel } from "./ui/analytics-panel";
import { MaskParser, ParsedMask } from "./utils/mask-parser";
import { FileManager } from "./utils/file-manager";
import { EntityFinder } from "./utils/entity-finder";
import { performanceMonitor } from "./utils/performance-monitor";
import { errorHandler, ErrorCategory, ErrorSeverity } from "./utils/error-handler";
import { initializeAnalytics, getAnalytics } from "./utils/analytics";
import { RibbonMenu, RibbonMenuOptions } from "./ui/ribbon-menu";
import { RibbonAction, AnyRibbonAction } from "./settings";

// –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è debounce, —Ç–∞–∫ –∫–∞–∫ obsidian –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number,
  immediate = false
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout | null = null;
  return function executedFunction(...args: Parameters<T>) {
    const later = () => {
      timeout = null;
      if (!immediate) func(...args);
    };
    const callNow = immediate && !timeout;
    if (timeout) clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func(...args);
  };
}

export default class MaskBuilderPlugin extends Plugin {
  settings: PluginSettings = DEFAULT_SETTINGS;
  private fileManager!: FileManager;
  private entityFinder!: EntityFinder;
  private debouncedProcessFile!: (file: TFile) => void;
  private ribbonMenu!: RibbonMenu;
  private ribbonContainer!: HTMLElement;

  async onload() {
    try {
      performanceMonitor.startTimer('pluginLoad');
      console.log("Loading Mask Builder plugin...");

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      this.settings = migrateSettings(this.settings);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      initializeAnalytics("1.0.0", this.settings);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–∏—Å–∫–æ–≤–∏–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π
      this.fileManager = new FileManager(this.app);
      this.entityFinder = new EntityFinder(this.app);

      // –°–æ–∑–¥–∞–µ–º debounced —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
      this.debouncedProcessFile = debounce(
        (file: TFile) => this.processFile(file),
        this.settings.debounceDelay,
        true
      );

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
      this.registerCommands();

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
      this.addSettingTab(new MaskBuilderSettingTab(this.app, this));

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.registerEventHandlers();

      // –°–æ–∑–¥–∞–µ–º –ª–µ–Ω—Ç–æ—á–Ω–æ–µ –º–µ–Ω—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
      this.createRibbonMenu();

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ–∫–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π
      this.registerEvent(
        this.app.workspace.on('layout-change', () => {
          this.updateRibbonMenuPosition();
        })
      );

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –ª–µ–Ω—Ç–æ—á–Ω–æ–µ –º–µ–Ω—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      setTimeout(() => {
        if (!this.ribbonContainer || !this.ribbonContainer.parentNode) {
          console.log('üîç –õ–µ–Ω—Ç–æ—á–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π...');
          this.createRibbonMenu();
        }
      }, 1000);

      performanceMonitor.endTimer('pluginLoad');
      console.log("Mask Builder plugin loaded successfully");
    } catch (error) {
      errorHandler.handleCriticalError(
        error instanceof Error ? error : new Error(String(error)),
        { operation: 'pluginLoad' }
      );
      throw error;
    }
  }

  onunload() {
    console.log("Unloading Mask Builder plugin");
    
    try {
      // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ª–µ–Ω—Ç–æ—á–Ω–æ–µ –º–µ–Ω—é
      if (this.ribbonMenu) {
        this.ribbonMenu.destroy();
      }
      
      // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–µ–Ω—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é
      if (this.ribbonContainer && this.ribbonContainer.parentNode) {
        this.ribbonContainer.parentNode.removeChild(this.ribbonContainer);
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      this.fileManager.clearCache();
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      performanceMonitor.logPerformanceReport();
      
      console.log("Mask Builder plugin unloaded");
    } catch (error) {
      errorHandler.handleError(
        error instanceof Error ? error : new Error(String(error)),
        ErrorCategory.UNKNOWN,
        ErrorSeverity.MEDIUM,
        { operation: 'pluginUnload' }
      );
    }
  }

  private registerCommands(): void {
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mask Builder
    this.addCommand({
      id: "open-mask-builder",
      name: "–û—Ç–∫—Ä—ã—Ç—å Mask Builder",
      callback: () => this.openMaskBuilder(),
      hotkeys: [{ modifiers: ["Mod", "Shift"], key: "M" }],
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –ø–æ –º–∞—Å–∫–µ
    this.addCommand({
      id: "create-note-from-mask",
      name: "–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ –º–∞—Å–∫–µ",
      callback: () => this.createNoteFromMask(),
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    this.addCommand({
      id: "validate-current-file-mask",
      name: "–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞",
      callback: () => this.validateCurrentFileMask(),
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ –º–∞—Å–∫–µ
    this.addCommand({
      id: "move-file-by-mask",
      name: "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –ø–æ –º–∞—Å–∫–µ",
      callback: () => this.moveCurrentFileByMask(),
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if (this.settings.enabled) {
      this.addCommand({
        id: "open-debug-panel",
        name: "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏",
        callback: () => this.openDebugPanel(),
        hotkeys: [{ modifiers: ["Mod", "Shift", "Alt"], key: "D" }],
      });

      // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      this.addCommand({
        id: "open-analytics-panel",
        name: "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
        callback: () => this.openAnalyticsPanel(),
        hotkeys: [{ modifiers: ["Mod", "Shift", "Alt"], key: "A" }],
      });

      // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–Ω—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é
      this.addCommand({
        id: "force-create-ribbon-menu",
        name: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ª–µ–Ω—Ç–æ—á–Ω–æ–µ –º–µ–Ω—é",
        callback: () => this.forceCreateRibbonMenu(),
        hotkeys: [{ modifiers: ["Mod", "Shift", "Alt"], key: "R" }],
      });

      // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–µ–Ω—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é
      this.addCommand({
        id: "check-ribbon-menu-status",
        name: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–Ω—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é",
        callback: () => this.checkRibbonMenuStatus(),
        hotkeys: [{ modifiers: ["Mod", "Shift", "Alt"], key: "S" }],
      });
    }
  }

  private registerEventHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        if (file instanceof TFile && this.settings.autoCategorize) {
          this.debouncedProcessFile(file);
        }
      })
    );

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    this.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (file instanceof TFile && this.settings.autoCategorize) {
          this.debouncedProcessFile(file);
        }
      })
    );

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        if (file instanceof TFile && this.settings.autoCategorize) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä
          this.checkFrontmatterChanges(file);
        }
      })
    );
  }

  private async processFile(file: TFile): Promise<void> {
    try {
      const content = await this.app.vault.read(file);
      const frontmatter = this.app.metadataCache.getFileCache(file)?.frontmatter;
      
      if (frontmatter) {
        const maskMatch = frontmatter.match(/^mask:\s*(.+)$/m);
        
        if (maskMatch && maskMatch[1]) {
          const maskString = maskMatch[1].replace(/['"]/g, "");
          const mask = MaskParser.parse(maskString);
          if (!mask) return;

          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–∞—Å–∫—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
          if (this.settings.maskValidation) {
            performanceMonitor.startTimer('maskValidation');
            const validation = MaskParser.validate(mask);
            performanceMonitor.endTimer('maskValidation');
            
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
            const analytics = getAnalytics();
            if (analytics) {
              analytics.trackMaskValidation(file.name, validation.valid, validation.errors);
            }
            
            if (!validation.valid) {
              errorHandler.handleValidationError(
                `Invalid mask in file ${file.name}: ${validation.errors.join(', ')}`,
                { fileName: file.name, mask, errors: validation.errors }
              );
              performanceMonitor.endTimer('fileProcessing');
              return;
            }
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä
          performanceMonitor.startTimer('fileOperations');
          await this.fileManager.updateFrontmatter(file, mask);
          performanceMonitor.endTimer('fileOperations');

          // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
          const analytics = getAnalytics();
          if (analytics) {
            analytics.trackFileOperation('updateFrontmatter', file.name, true);
          }

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
          if (this.settings.autoCategorize) {
            await this.autoMoveFile(file, mask);
          }
          
          performanceMonitor.endTimer('fileProcessing');
        }
      }
    } catch (error) {
      errorHandler.handleError(
        error instanceof Error ? error : new Error(String(error)),
        ErrorCategory.FILE_OPERATION,
        ErrorSeverity.MEDIUM,
        { file: file.path }
      );
    }
  }

  private extractMaskFromFileName(fileName: string): ParsedMask | null {
    // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const nameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –º–∞—Å–∫—É
    return MaskParser.parse(nameWithoutExt);
  }

  private async autoMoveFile(file: TFile, mask: ParsedMask): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å —Ñ–∞–π–ª
      const currentPath = file.path;
      const targetPath = MaskParser.generateFilePath(mask, "");
      const fileName = MaskParser.generateFileName(mask);
      const fullTargetPath = `${targetPath}${fileName}.md`;

      // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ, –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º
      if (currentPath === fullTargetPath) return;

      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
      await this.fileManager.moveFileByMask(file, mask);
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
      const analytics = getAnalytics();
      if (analytics) {
        analytics.trackFileOperation('moveFile', file.name, true);
      }
    } catch (error) {
      errorHandler.handleFileOperationError(
        error instanceof Error ? error : new Error(String(error)),
        { fileName: file.name, operation: 'autoMoveFile', mask }
      );
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
      const analytics = getAnalytics();
      if (analytics) {
        analytics.trackFileOperation('moveFile', file.name, false);
      }
    }
  }

  private async checkFrontmatterChanges(file: TFile): Promise<void> {
    try {
      // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
      const content = await this.app.vault.read(file);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å–∫—É –∏–∑ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä–∞
      const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
      if (!frontmatterMatch) return;

      const frontmatter = frontmatterMatch[1];
      if (!frontmatter) return;
      
      const maskMatch = frontmatter.match(/^mask:\s*(.+)$/m);
      if (!maskMatch || !maskMatch[1]) return;

      const maskString = maskMatch[1].replace(/['"]/g, "");
      const mask = MaskParser.parse(maskString);
      if (!mask) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å —Ñ–∞–π–ª
      await this.autoMoveFile(file, mask);
    } catch (error) {
      errorHandler.handleFileOperationError(
        error instanceof Error ? error : new Error(String(error)),
        { fileName: file.name, operation: 'checkFrontmatterChanges' }
      );
    }
  }

  private openMaskBuilder(): void {
    if (!this.settings.enabled) {
      new Notice("Mask Builder –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö");
      return;
    }

    const modal = new MaskBuilderModal(
      this.app,
      this.fileManager,
      async (mask: ParsedMask, content: string) => {
        await this.createFileFromMask(mask, content);
      }
    );
    modal.open();
  }

  private async createFileFromMask(mask: ParsedMask, content: string): Promise<void> {
    try {
      const template = this.settings.defaultTemplate || undefined;
      const file = await this.fileManager.createFileFromMask(mask, content, template);
      
      if (file) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        this.app.workspace.openLinkText(file.path, "", true);
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
        const analytics = getAnalytics();
        if (analytics) {
          analytics.trackMaskCreated(mask.entity, true);
          analytics.trackFileOperation('createFile', file.name, true);
        }
      }
    } catch (error) {
      errorHandler.handleFileOperationError(
        error instanceof Error ? error : new Error(String(error)),
        { operation: 'createFileFromMask', mask }
      );
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
      const analytics = getAnalytics();
      if (analytics) {
        analytics.trackMaskCreated(mask.entity, false);
        analytics.trackFileOperation('createFile', 'unknown', false);
      }
      
      new Notice("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
    }
  }

  private async createNoteFromMask(): Promise<void> {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new Notice("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞");
      return;
    }

    const mask = this.extractMaskFromFileName(activeFile.name);
    if (!mask) {
      new Notice("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–∞—Å–∫—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞");
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const content = await this.app.vault.read(activeFile);
    await this.createFileFromMask(mask, content);
  }

  private async validateCurrentFileMask(): Promise<void> {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new Notice("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞");
      return;
    }

    const mask = this.extractMaskFromFileName(activeFile.name);
    if (!mask) {
      new Notice("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–∞—Å–∫—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞");
      return;
    }

    const validation = MaskParser.validate(mask);
    if (validation.valid) {
      new Notice("–ú–∞—Å–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
    } else {
      new Notice(`–û—à–∏–±–∫–∏ –≤ –º–∞—Å–∫–µ: ${validation.errors.join(', ')}`);
    }
  }

  private async moveCurrentFileByMask(): Promise<void> {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new Notice("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞");
      return;
    }

    const mask = this.extractMaskFromFileName(activeFile.name);
    if (!mask) {
      new Notice("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–∞—Å–∫—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞");
      return;
    }

    const success = await this.fileManager.moveFileByMask(activeFile, mask);
    if (success) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª
      this.app.workspace.openLinkText(activeFile.path, "", true);
    }
  }

  async loadSettings() {
    try {
      const raw = await this.loadData();
      const merged = { ...DEFAULT_SETTINGS, ...(raw ?? {}) };
      this.settings = migrateSettings(merged);
    } catch (error) {
      errorHandler.handleError(
        error instanceof Error ? error : new Error(String(error)),
        ErrorCategory.UNKNOWN,
        ErrorSeverity.HIGH,
        { operation: 'loadSettings' }
      );
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      this.settings = DEFAULT_SETTINGS;
    }
  }

  async saveSettings() {
    try {
      await this.saveData(this.settings);
    } catch (error) {
      errorHandler.handleError(
        error instanceof Error ? error : new Error(String(error)),
        ErrorCategory.UNKNOWN,
        ErrorSeverity.HIGH,
        { operation: 'saveSettings' }
      );
    }
  }

  private openDebugPanel(): void {
    const debugPanel = new DebugPanel(this.app);
    debugPanel.open();
  }

  private openAnalyticsPanel(): void {
    const analyticsPanel = new AnalyticsPanel(this.app);
    analyticsPanel.open();
  }

  private createRibbonMenu(): void {
    if (!this.settings.enabled || !this.settings.ribbonMenu?.enabled) {
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–µ–Ω—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    this.ribbonContainer = document.createElement('div');
    this.ribbonContainer.addClass('mask-builder-ribbon-container');
    
    // –†–∞–∑–º–µ—â–∞–µ–º –≤–Ω–∏–∑—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    const mainContainer = this.app.workspace.containerEl;
    
    // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Obsidian
    mainContainer.appendChild(this.ribbonContainer);
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ body, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if (!this.ribbonContainer.parentNode) {
      document.body.appendChild(this.ribbonContainer);
    }

    const options: RibbonMenuOptions = {
      position: this.settings.ribbonMenu.position || 'bottom',
      actions: (this.settings.ribbonMenu.actions || []) as AnyRibbonAction[],
      onAction: (action: AnyRibbonAction, context: any) => {
        this.handleRibbonAction(action, context);
      }
    };

    this.ribbonMenu = new RibbonMenu(this.app, options);
    this.ribbonMenu.create(this.ribbonContainer);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    this.updateRibbonMenuPosition();
  }

  private handleRibbonAction(action: AnyRibbonAction, context: any): void {
    
    switch (action.action) {
      case 'create':
        this.openMaskBuilder();
        break;
        
      case 'format':
        this.formatCurrentNote();
        break;
        
      case 'api':
        this.sendToAPI();
        break;
        
      case 'custom':
        this.handleCustomAction(action);
        break;
        
      default:
        new Notice(`–î–µ–π—Å—Ç–≤–∏–µ "${(action as any).action}" –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ`);
    }
  }

  private handleCustomAction(action: any): void {
    const customAction = action.customAction;
    if (!customAction) {
      return;
    }
    
    switch (customAction) {
      case 'saveTemplate':
        this.saveAsTemplate();
        break;
        
      case 'exportMarkdown':
        this.exportMarkdown();
        break;
        
      case 'editFrontmatter':
        this.editFrontmatter();
        break;
        
      case 'createFrontmatter':
        this.createFrontmatter();
        break;
        
      case 'openNotes':
        this.openNotes();
        break;
        
      case 'openProjects':
        this.openProjects();
        break;
        
      case 'openDecisions':
        this.openDecisions();
        break;
        
      default:
        new Notice(`–î–µ–π—Å—Ç–≤–∏–µ "${customAction}" –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ`);
    }
  }

  private forceCreateRibbonMenu(): void {
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ª–µ–Ω—Ç–æ—á–Ω–æ–µ –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.ribbonContainer && this.ribbonContainer.parentNode) {
      this.ribbonContainer.parentNode.removeChild(this.ribbonContainer);
    }
    
    if (this.ribbonMenu) {
      this.ribbonMenu.destroy();
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
    this.createRibbonMenu();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    new Notice('–õ–µ–Ω—Ç–æ—á–Ω–æ–µ –º–µ–Ω—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ!');
  }

  private checkRibbonMenuStatus(): void {
    
  }

  private updateRibbonMenuPosition(): void {
    if (!this.ribbonContainer) return;
    
    // –¢–µ–ø–µ—Ä—å CSS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π
    // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const leftPanel = this.app.workspace.leftSplit;
    const rightPanel = this.app.workspace.rightSplit;
    
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ª–µ–Ω—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é
  private formatCurrentNote(): void {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      new Notice(`–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: ${activeFile.name}`);
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    } else {
      new Notice('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  }

  private sendToAPI(): void {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      new Notice(`–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ API: ${activeFile.name}`);
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ API
    } else {
      new Notice('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
    }
  }

  private saveAsTemplate(): void {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      new Notice(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω: ${activeFile.name}`);
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω
    } else {
      new Notice('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
  }

  private exportMarkdown(): void {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      new Notice(`–≠–∫—Å–ø–æ—Ä—Ç Markdown: ${activeFile.name}`);
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç Markdown
    } else {
      new Notice('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
    }
  }

  private editFrontmatter(): void {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      new Notice(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä–∞: ${activeFile.name}`);
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä–∞
    } else {
      new Notice('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  }

  private createFrontmatter(): void {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      new Notice(`–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä–∞: ${activeFile.name}`);
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä–∞
    } else {
      new Notice('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä–∞');
    }
  }

  private openNotes(): void {
    new Notice('–û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–º–µ—Ç–æ–∫');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–º–µ—Ç–æ–∫
  }

  private openProjects(): void {
    new Notice('–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
  }

  private openDecisions(): void {
    new Notice('–û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { MaskBuilderPlugin };